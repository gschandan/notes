{
  "hash": "483a50dfd4f39e62afabf0ae041ced42",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ncategories:\n  - DSA\n  - data-structures\n  - introduction\n  - linked-lists\n  - python\ndate: '2024-08-27'\ndescription: Linked Lists Introduction\nlayout: post\ntitle: Introduction to Linked Lists\ntoc: true\nformat:\n  html:\n    html-math-method: katex\n---\n\n## Linked Lists\n\nA linked list is a linear data structure where elements are stored in nodes. Each node contains a data field and a reference (or link) to the next node in the sequence.\n\n### Basic Structure\n\n```markdown\n[Data|Next] -> [Data|Next] -> [Data|Next] -> null\n```\n\n### Types of Linked Lists\n\n1. Singly Linked List\n2. Doubly Linked List\n3. Circular Linked List\n\n### 1. Singly Linked List\n\nIn a singly linked list, each node points to the next node in the sequence. In the following examples, the dot (•) is a pointer to the relevant node: \n\nExample:\n```markdown\n[3|•] -> [7|•] -> [1|•] -> [9|•] -> [4|•] -> null\n```\n\nOperations:\n- Access: $O(n)$\n- Search: $O(n)$\n- Insertion at beginning: $O(1)$\n- Insertion at end: $O(n)$\n- Deletion at beginning: $O(1)$\n- Deletion at end: $O(n)$\n\n#### Example:\n\n::: {#fd97f896 .cell execution_count=1}\n``` {.python .cell-code}\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n    \n    def __str__(self):\n        if not self.head:\n            return \"empty\"\n        current = self.head\n        result = []\n        while current:\n            result.append(f\"[{current.data}|•]\")\n            current = current.next\n        result.append(\"null\")\n        return \" -> \".join(result)\n\nsll = SinglyLinkedList()\nsll.append(3)\nsll.append(7)\nsll.append(1)\nsll.append(9)\nsll.append(4)\nprint(\"Singly Linked List:\", sll)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSingly Linked List: [3|•] -> [7|•] -> [1|•] -> [9|•] -> [4|•] -> null\n```\n:::\n:::\n\n\n### 2. Doubly Linked List\n\nIn a doubly linked list, each node contains references to both the next and previous nodes.\n\nExample:\n```markdown\nnull <-> [3|•|•] <-> [7|•|•] <-> [1|•|•] <-> [9|•|•] <-> [4|•|•] <-> null\n```\n\nOperations:\n- Access: $O(n)$\n- Search: $O(n)$\n- Insertion at beginning/end: $O(1)$\n- Deletion at beginning/end: $O(1)$\n\n#### Example:\n\n::: {#2ef20257 .cell execution_count=2}\n``` {.python .cell-code}\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n        new_node.prev = last\n\n    def __str__(self):\n        if not self.head:\n            return \"empty\"\n        current = self.head\n        result = [\"null\"]\n        while current:\n            result.append(f\"[{current.data}|•|•]\")\n            current = current.next\n        result.append(\"null\")\n        return \" <-> \".join(result)\n\n\ndll = DoublyLinkedList()\ndll.append(3)\ndll.append(7)\ndll.append(1)\ndll.append(9)\ndll.append(4)\nprint(\"Doubly Linked List:\", dll)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDoubly Linked List: null <-> [3|•|•] <-> [7|•|•] <-> [1|•|•] <-> [9|•|•] <-> [4|•|•] <-> null\n```\n:::\n:::\n\n\n### 3. Circular Linked List\n\nIn a circular linked list, the last node points back to the first node, forming a circle.\n\nExample (Singly Circular):\n```markdown\n    ┌────────────────────────────────┐\n    │                                ▼\n[3|•] -> [7|•] -> [1|•] -> [9|•] -> [4|•]\n```\n\nOperations:\n- Similar to singly/doubly linked lists\n- No null end: facilitates continuous traversal\n\n#### Example:\n\n::: {#33ffaa70 .cell execution_count=3}\n``` {.python .cell-code}\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            new_node.next = self.head\n            return\n        last = self.head\n        while last.next != self.head:\n            last = last.next\n        last.next = new_node\n        new_node.next = self.head\n\n    def __str__(self):\n        if not self.head:\n            return \"empty\"\n        current = self.head\n        result = []\n        while True:\n            result.append(f\"[{current.data}|•]\")\n            current = current.next\n            if current == self.head:\n                break\n        return \" -> \".join(result) + \" (circular)\"\n\ncll = CircularLinkedList()\ncll.append(3)\ncll.append(7)\ncll.append(1)\ncll.append(9)\ncll.append(4)\nprint(\"Circular Linked List:\", cll)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCircular Linked List: [3|•] -> [7|•] -> [1|•] -> [9|•] -> [4|•] (circular)\n```\n:::\n:::\n\n\n### Advantages of Linked Lists\n\n1. Dynamic size\n2. Ease of insertion/deletion\n3. Efficient memory utilization\n\n### Disadvantages of Linked Lists\n\n1. Random access is not allowed - must be traversed\n2. Extra memory space for pointers at each node\n3. Not cache friendly - less cache locality for CPU than a contiguous array - more likely to be randomly scattered around and therefore get cache misses\n\n### Applications\n\n- Implementation of stacks and queues  \n- Implementing mutable arrays or collections  \n\n\n# References\n\n## References for Linked Lists\n\n[^1] [HackerRank - Linked Lists Data Structure](https://www.hackerrank.com/domains/data-structures?filters%5Bsubdomains%5D%5B%5D=linked-lists)\n\n[^2] [Stanford CS Education Library - Linked List Basics](http://cslibrary.stanford.edu/103/LinkedListBasics.pdf)\n\n[^3] [VisuAlgo - Linked List Visualization](https://visualgo.net/en/list)\n\n[^4] [leetcode](https://leetcode.com/tag/linked-list/)\n\n",
    "supporting": [
      "2024-08-27-linked-lists_files"
    ],
    "filters": [],
    "includes": {}
  }
}